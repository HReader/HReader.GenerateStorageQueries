using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace HReader.GenerateStorageQueries
{
    public class Program
    {
        private const string Header = @"//==========================================================================
// This file was automatically generated by HReader.GenerateStorageQueries
//==========================================================================
using System;

namespace HReader.Core.Storage.Queries
{
    internal partial class QueryManager
    {
";

        private const string Footer = @"    }
}";


        private static string GetLazy(string name, string ns = "")
        {
            var varName = $"{ns.Replace(".", "")}{name}";
            varName = varName[0].ToString().ToLower() + varName.Substring(1);

            return $"        private readonly Lazy<string> {varName} = ReadLazy(\"{ns}{name}.sql\");";
        }

        private static string GetValue(string name, string ns = "")
        {
            var varName = $"{ns.Replace(".", "")}{name}";
            var lowerVarName = varName[0].ToString().ToLower() + varName.Substring(1);

            return $"        public string {varName} => {lowerVarName}.Value;";
        }

        public static void Main(string[] args)
        {
            var dir = Assembly.GetExecutingAssembly().Location;
            dir = Path.GetDirectoryName(dir) + "\\";

            var lazyList = new List<string>();
            var valueList = new List<string>();

            foreach (var file in Directory.EnumerateFiles(dir, "*.sql", SearchOption.AllDirectories))
            {
                var fullname = file.Replace(dir, "").Replace(".sql", "");

                if (fullname.IndexOf("\\", StringComparison.Ordinal) >= 0)
                {
                    var lastindex = fullname.LastIndexOf("\\", StringComparison.Ordinal);
                    var ns = fullname.Substring(0, lastindex + 1).Replace("\\", ".");
                    var name = fullname.Substring(lastindex).Substring(1);

                    lazyList.Add(GetLazy(name, ns));
                    valueList.Add(GetValue(name, ns));
                }
                else
                {
                    lazyList.Add(GetLazy(fullname));
                    valueList.Add(GetValue(fullname));
                }
            }

            File.Delete("QueryManager.g.cs");

            using (var writer = new StreamWriter("QueryManager.g.cs", false))
            {
                writer.Write(Header);

                foreach (var lazy in lazyList)
                {
                    writer.WriteLine(lazy);
                }

                writer.WriteLine();

                foreach (var value in valueList)
                {
                    writer.WriteLine(value);
                }

                writer.Write(Footer);
            }
        }
    }
}
